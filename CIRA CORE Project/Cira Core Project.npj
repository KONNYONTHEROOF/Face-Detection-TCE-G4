{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{e717f25d-3ab8-4e28-b19f-0b3e6064cc72}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f79f09c3-b5ee-4888-834a-be1ad51f020e}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{240e1bf8-d795-4292-8d66-21d43f9516b8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{75a4ca1b-3f90-4133-a10e-d8e50d9fbc01}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{d4e33b1b-b564-4f26-b912-3783f93f2395}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b02bdfe5-ec8a-4315-9ddd-5e383afaa503}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4ee654aa-9c41-4720-bb9f-f716c87e016e}\",\n            \"in_index\": 0,\n            \"out_id\": \"{75a4ca1b-3f90-4133-a10e-d8e50d9fbc01}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f3b71497-b394-4819-9f86-c4b0794ea85a}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f91986ec-78e2-4f62-a572-4151a42e0f29}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f91986ec-78e2-4f62-a572-4151a42e0f29}\",\n            \"in_index\": 0,\n            \"out_id\": \"{c9a00441-7c52-45ae-8b21-c60911d6f24b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{c9a00441-7c52-45ae-8b21-c60911d6f24b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f3b71497-b394-4819-9f86-c4b0794ea85a}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b1ee8d5f-3412-4401-9073-dcf5a20258b5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f79f09c3-b5ee-4888-834a-be1ad51f020e}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b02bdfe5-ec8a-4315-9ddd-5e383afaa503}\",\n            \"in_index\": 0,\n            \"out_id\": \"{d4e33b1b-b564-4f26-b912-3783f93f2395}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{75a4ca1b-3f90-4133-a10e-d8e50d9fbc01}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4ee654aa-9c41-4720-bb9f-f716c87e016e}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f79f09c3-b5ee-4888-834a-be1ad51f020e}\",\n            \"in_index\": 0,\n            \"out_id\": \"{d4e33b1b-b564-4f26-b912-3783f93f2395}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{b1ee8d5f-3412-4401-9073-dcf5a20258b5}\",\n            \"model\": {\n                \"height\": 628,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 1085\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 703,\n                \"y\": -551\n            }\n        },\n        {\n            \"id\": \"{c9a00441-7c52-45ae-8b21-c60911d6f24b}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 1368,\n                \"y\": 323\n            }\n        },\n        {\n            \"id\": \"{f79f09c3-b5ee-4888-834a-be1ad51f020e}\",\n            \"model\": {\n                \"data\": {\n                    \"face_only\": false,\n                    \"font_scale\": 1.05,\n                    \"font_thickness\": 2,\n                    \"max_distance\": 25,\n                    \"rect_thickness\": 2,\n                    \"result_drawing\": true,\n                    \"show_distance\": true,\n                    \"text_drawing\": true,\n                    \"thresh\": 80,\n                    \"txt_offset\": 10\n                },\n                \"name\": \"FaceRec\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 342,\n                \"y\": 38\n            }\n        },\n        {\n            \"id\": \"{d4e33b1b-b564-4f26-b912-3783f93f2395}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"WebCam \",\n                \"node_enable\": true,\n                \"setting\": {\n                    \"webcamUUID\": \"B24-77B\"\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 0,\n                \"y\": 19\n            }\n        },\n        {\n            \"id\": \"{e717f25d-3ab8-4e28-b19f-0b3e6064cc72}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python313\",\n                    \"script\": \"import pandas as pd\\nfrom datetime import datetime, timedelta, time\\nimport os\\nimport time as time_sleep\\nfrom playsound import playsound\\n\\nfolder_path = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Attendance/\\\"\\nmp3_pass = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Audio/PASS.mp3\\\"\\nmp3_unknown = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Audio/UNKNOWN.mp3\\\"\\n\\ntoday_date_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\nexcel_file_path = os.path.join(folder_path, f\\\"attendance_{today_date_str}.xlsx\\\")\\nlog_file_path = os.path.join(folder_path, f\\\"log_{today_date_str}.txt\\\")\\n\\nif os.path.exists(excel_file_path):\\n\\tdf = pd.read_excel(excel_file_path)\\n\\tattendance_data = df.to_dict(orient=\\\"records\\\")\\nelse:\\n\\tattendance_data = []\\n\\tdf = pd.DataFrame(columns=[\\\"name\\\", \\\"entry_time\\\", \\\"exit_time\\\", \\\"duration\\\", \\\"status\\\"])\\n\\tdf.to_excel(excel_file_path, index=False)\\n\\nlast_recorded = {}\\n\\ndef write_log(message):\\n\\twith open(log_file_path, \\\"a\\\", encoding=\\\"utf-8\\\") as log_file:\\n\\t\\tlog_file.write(f\\\"{datetime.now().strftime('%H:%M:%S')} - {message}\\\\n\\\")\\n\\ndef record_attendance(objects):\\n\\tif not attendance_data:\\n\\t\\tprint(\\\"ไม่มีข้อมูลใน attendance_data, เตรียมพร้อมสำหรับการบันทึกใหม่\\\")\\n\\n\\tfor objs in objects:\\n\\t\\tif \\\"name\\\" in objs:\\n\\t\\t\\tname = objs[\\\"name\\\"]\\n\\n\\t\\t\\tif name == \\\"UNKNOWN\\\":\\n\\t\\t\\t\\tplaysound(mp3_unknown)\\n\\t\\t\\t\\tcontinue\\n\\n\\t\\t\\tcurrent_time = datetime.now()\\n\\n\\t\\t\\tif current_time.time() > time(8, 0):\\n\\t\\t\\t\\tstatus = \\\"มาสาย\\\"\\n\\t\\t\\telse:\\n\\t\\t\\t\\tstatus = \\\"ตรงเวลา\\\"\\n\\n\\t\\t\\tfound = False\\n\\t\\t\\tfor record in attendance_data:\\n\\t\\t\\t\\tif record[\\\"name\\\"] == name and pd.isna(record.get(\\\"exit_time\\\")):\\n\\t\\t\\t\\t\\tprint(f\\\"บันทึกเวลาออก: {name} ออกเมื่อ {current_time.strftime('%H:%M:%S')}\\\")\\n\\t\\t\\t\\t\\trecord[\\\"exit_time\\\"] = current_time\\n\\n\\t\\t\\t\\t\\tentry_time = pd.to_datetime(record[\\\"entry_time\\\"])\\n\\t\\t\\t\\t\\tduration = current_time - entry_time\\n\\t\\t\\t\\t\\trecord[\\\"duration\\\"] = str(duration).split('.')[0]\\n\\n\\t\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\t\\tlast_recorded[name] = current_time\\n\\t\\t\\t\\t\\twrite_log(f\\\"บันทึกเวลาออก: {name} ออกเมื่อ {current_time.strftime('%H:%M:%S')} (อยู่ {record['duration']})\\\")\\n\\n\\t\\t\\t\\t\\tplaysound(mp3_pass)\\n\\t\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tif not found:\\n\\t\\t\\t\\tprint(f\\\"บันทึกเวลาเข้า: {name} เข้าเมื่อ {current_time.strftime('%H:%M:%S')} ({status})\\\")\\n\\t\\t\\t\\tattendance_data.append({\\n\\t\\t\\t\\t\\t\\\"name\\\": name,\\n\\t\\t\\t\\t\\t\\\"entry_time\\\": current_time,\\n\\t\\t\\t\\t\\t\\\"exit_time\\\": None,\\n\\t\\t\\t\\t\\t\\\"duration\\\": None,\\n\\t\\t\\t\\t\\t\\\"status\\\": status\\n\\t\\t\\t\\t})\\n\\n\\t\\t\\t\\tlast_recorded[name] = current_time\\n\\t\\t\\t\\twrite_log(f\\\"บันทึกเวลาเข้า: {name} เข้าเมื่อ {current_time.strftime('%H:%M:%S')} ({status})\\\")\\n\\n\\t\\t\\t\\tplaysound(mp3_pass)\\n\\n\\t\\t\\tdf = pd.DataFrame(attendance_data)\\n\\t\\t\\tdf.to_excel(excel_file_path, index=False)\\n\\n\\t\\t\\ttime_sleep.sleep(3)\\n\\nobjects = payload[\\\"FaceRec\\\"][\\\"face_array\\\"]\\n\\nrecord_attendance(objects)\\n\\ndf = pd.DataFrame(attendance_data)\\ndf.to_excel(excel_file_path, index=False)\",\n                    \"tmp_path\": \"C:/Users/Administrator\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 15,\n                        \"splt1\": 10\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import pandas as pd\\nfrom datetime import datetime, timedelta, time\\nimport os\\nimport time as time_sleep\\nfrom playsound import playsound\\n\\nfolder_path = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Attendance/\\\"\\nmp3_pass = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Audio/PASS.mp3\\\"\\nmp3_unknown = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Audio/UNKNOWN.mp3\\\"\\n\\ntoday_date_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\nexcel_file_path = os.path.join(folder_path, f\\\"attendance_{today_date_str}.xlsx\\\")\\nlog_file_path = os.path.join(folder_path, f\\\"log_{today_date_str}.txt\\\")\\n\\nif os.path.exists(excel_file_path):\\n\\tdf = pd.read_excel(excel_file_path)\\n\\tattendance_data = df.to_dict(orient=\\\"records\\\")\\nelse:\\n\\tattendance_data = []\\n\\tdf = pd.DataFrame(columns=[\\\"name\\\", \\\"entry_time\\\", \\\"exit_time\\\", \\\"duration\\\", \\\"status\\\"])\\n\\tdf.to_excel(excel_file_path, index=False)\\n\\nlast_recorded = {}\\n\\ndef write_log(message):\\n\\twith open(log_file_path, \\\"a\\\", encoding=\\\"utf-8\\\") as log_file:\\n\\t\\tlog_file.write(f\\\"{datetime.now().strftime('%H:%M:%S')} - {message}\\\\n\\\")\\n\\ndef record_attendance(objects):\\n\\tif not attendance_data:\\n\\t\\tprint(\\\"ไม่มีข้อมูลใน attendance_data, เตรียมพร้อมสำหรับการบันทึกใหม่\\\")\\n\\n\\tfor objs in objects:\\n\\t\\tif \\\"name\\\" in objs:\\n\\t\\t\\tname = objs[\\\"name\\\"]\\n\\n\\t\\t\\tif name == \\\"UNKNOWN\\\":\\n\\t\\t\\t\\tplaysound(mp3_unknown)\\n\\t\\t\\t\\tcontinue\\n\\n\\t\\t\\tcurrent_time = datetime.now()\\n\\n\\t\\t\\tif current_time.time() > time(8, 0):\\n\\t\\t\\t\\tstatus = \\\"มาสาย\\\"\\n\\t\\t\\telse:\\n\\t\\t\\t\\tstatus = \\\"ตรงเวลา\\\"\\n\\n\\t\\t\\tfound = False\\n\\t\\t\\tfor record in attendance_data:\\n\\t\\t\\t\\tif record[\\\"name\\\"] == name and pd.isna(record.get(\\\"exit_time\\\")):\\n\\t\\t\\t\\t\\tprint(f\\\"บันทึกเวลาออก: {name} ออกเมื่อ {current_time.strftime('%H:%M:%S')}\\\")\\n\\t\\t\\t\\t\\trecord[\\\"exit_time\\\"] = current_time\\n\\n\\t\\t\\t\\t\\tentry_time = pd.to_datetime(record[\\\"entry_time\\\"])\\n\\t\\t\\t\\t\\tduration = current_time - entry_time\\n\\t\\t\\t\\t\\trecord[\\\"duration\\\"] = str(duration).split('.')[0]\\n\\n\\t\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\t\\tlast_recorded[name] = current_time\\n\\t\\t\\t\\t\\twrite_log(f\\\"บันทึกเวลาออก: {name} ออกเมื่อ {current_time.strftime('%H:%M:%S')} (อยู่ {record['duration']})\\\")\\n\\n\\t\\t\\t\\t\\tplaysound(mp3_pass)\\n\\t\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tif not found:\\n\\t\\t\\t\\tprint(f\\\"บันทึกเวลาเข้า: {name} เข้าเมื่อ {current_time.strftime('%H:%M:%S')} ({status})\\\")\\n\\t\\t\\t\\tattendance_data.append({\\n\\t\\t\\t\\t\\t\\\"name\\\": name,\\n\\t\\t\\t\\t\\t\\\"entry_time\\\": current_time,\\n\\t\\t\\t\\t\\t\\\"exit_time\\\": None,\\n\\t\\t\\t\\t\\t\\\"duration\\\": None,\\n\\t\\t\\t\\t\\t\\\"status\\\": status\\n\\t\\t\\t\\t})\\n\\n\\t\\t\\t\\tlast_recorded[name] = current_time\\n\\t\\t\\t\\twrite_log(f\\\"บันทึกเวลาเข้า: {name} เข้าเมื่อ {current_time.strftime('%H:%M:%S')} ({status})\\\")\\n\\n\\t\\t\\t\\tplaysound(mp3_pass)\\n\\n\\t\\t\\tdf = pd.DataFrame(attendance_data)\\n\\t\\t\\tdf.to_excel(excel_file_path, index=False)\\n\\n\\t\\t\\ttime_sleep.sleep(3)\\n\\nobjects = payload[\\\"FaceRec\\\"][\\\"face_array\\\"]\\n\\nrecord_attendance(objects)\\n\\ndf = pd.DataFrame(attendance_data)\\ndf.to_excel(excel_file_path, index=False)\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 760,\n                \"y\": 361\n            }\n        },\n        {\n            \"id\": \"{f3b71497-b394-4819-9f86-c4b0794ea85a}\",\n            \"model\": {\n                \"delay_time\": 3000,\n                \"name\": \"Delay\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 1900,\n                \"y\": 323\n            }\n        },\n        {\n            \"id\": \"{f91986ec-78e2-4f62-a572-4151a42e0f29}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python313\",\n                    \"script\": \"import pandas as pd\\nfrom datetime import datetime\\nimport os\\nimport gspread\\nfrom oauth2client.service_account import ServiceAccountCredentials\\n\\nfolder_path = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Attendance/\\\"\\ngoogle_credentials_file = \\\"C:/Users/Administrator/Desktop/CIRA CORE Project/cira-core-term-project-fd5efed98c33.json\\\"\\ngoogle_sheet_name = \\\"Attendance_Records\\\"\\n\\ndef write_log(message, date_str=None):\\n\\tif date_str is None:\\n\\t\\tdate_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\n\\tlog_file_path = os.path.join(folder_path, f\\\"log_{date_str}.txt\\\")\\n\\twith open(log_file_path, \\\"a\\\", encoding=\\\"utf-8\\\") as log_file:\\n\\t\\tlog_file.write(f\\\"{datetime.now().strftime('%H:%M:%S')} - {message}\\\\n\\\")\\n\\ndef sync_rows(date_str=None):\\n\\ttry:\\n\\t\\tif date_str is None:\\n\\t\\t\\tdate_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\n\\t\\t\\n\\t\\t# Set up Google Sheets API\\n\\t\\tscope = [\\\"https://spreadsheets.google.com/feeds\\\", \\n\\t\\t\\t\\t \\\"https://www.googleapis.com/auth/drive\\\"]\\n\\t\\tcreds = ServiceAccountCredentials.from_json_keyfile_name(google_credentials_file, scope)\\n\\t\\tclient = gspread.authorize(creds)\\n\\t\\t\\n\\t\\t# Path to the Excel file\\n\\t\\texcel_path = os.path.join(folder_path, f\\\"attendance_{date_str}.xlsx\\\")\\n\\t\\tif not os.path.exists(excel_path):\\n\\t\\t\\twrite_log(f\\\"No Excel file found for date {date_str}\\\", date_str)\\n\\t\\t\\treturn False\\n\\t\\t\\n\\t\\tdf = pd.read_excel(excel_path)\\n\\t\\tspreadsheet = client.open(google_sheet_name)\\n\\t\\t\\n\\t\\t# Open the sheet or create a new one if not found\\n\\t\\ttry:\\n\\t\\t\\tsheet = spreadsheet.worksheet(date_str)\\n\\t\\texcept gspread.exceptions.WorksheetNotFound:\\n\\t\\t\\tsheet = spreadsheet.add_worksheet(title=date_str, rows=100, cols=5)\\n\\t\\t\\tsheet.append_row([\\\"Name\\\", \\\"Entry Time\\\", \\\"Exit Time\\\", \\\"Duration\\\", \\\"Status\\\"])\\n\\n\\t\\tsheet_data = sheet.get_all_values()\\n\\t\\tcurrent_row_count = len(sheet_data)  # includes header row\\n\\t\\texcel_row_count = len(df) + 1  # add 1 for header row\\n\\n\\t\\t# Update existing rows or add new rows\\n\\t\\tfor i in range(1, excel_row_count):  # Starting from 1 to skip header\\n\\t\\t\\trecord = df.iloc[i - 1]\\n\\t\\t\\trow_data = [\\n\\t\\t\\t\\tstr(record[\\\"name\\\"]),\\n\\t\\t\\t\\trecord[\\\"entry_time\\\"].strftime(\\\"%Y-%m-%d %H:%M:%S\\\") if pd.notna(record[\\\"entry_time\\\"]) else \\\"\\\",\\n\\t\\t\\t\\trecord[\\\"exit_time\\\"].strftime(\\\"%Y-%m-%d %H:%M:%S\\\") if pd.notna(record[\\\"exit_time\\\"]) else \\\"\\\",\\n\\t\\t\\t\\tstr(record[\\\"duration\\\"]) if pd.notna(record[\\\"duration\\\"]) else \\\"\\\",\\n\\t\\t\\t\\tstr(record[\\\"status\\\"]) if pd.notna(record[\\\"status\\\"]) else \\\"\\\"\\n\\t\\t\\t]\\n\\t\\t\\t\\n\\t\\t\\tif i < current_row_count:\\n\\t\\t\\t\\t# Update existing row in Google Sheet\\n\\t\\t\\t\\tsheet.update(f\\\"A{i+1}:E{i+1}\\\", [row_data])  # Update row based on position\\n\\t\\t\\telse:\\n\\t\\t\\t\\t# Add new row if Excel has more rows than Google Sheet\\n\\t\\t\\t\\tsheet.append_row(row_data)\\n\\t\\t\\n\\t\\twrite_log(f\\\"Synced data with Google Sheet for {date_str}\\\", date_str)\\n\\t\\treturn True\\n\\n\\texcept Exception as e:\\n\\t\\twrite_log(f\\\"Error syncing to Google Sheet: {str(e)}\\\", date_str)\\n\\t\\treturn False\\n\\nif __name__ == \\\"__main__\\\":\\n\\tsync_rows()\\n\",\n                    \"tmp_path\": \"C:/Users/Administrator\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 15,\n                        \"splt1\": 10\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import pandas as pd\\nfrom datetime import datetime\\nimport os\\nimport gspread\\nfrom oauth2client.service_account import ServiceAccountCredentials\\n\\nfolder_path = r\\\"C:/Users/Administrator/Desktop/CIRA CORE Project/Attendance/\\\"\\ngoogle_credentials_file = \\\"C:/Users/Administrator/Desktop/CIRA CORE Project/cira-core-term-project-fd5efed98c33.json\\\"\\ngoogle_sheet_name = \\\"Attendance_Records\\\"\\n\\ndef write_log(message, date_str=None):\\n\\tif date_str is None:\\n\\t\\tdate_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\n\\tlog_file_path = os.path.join(folder_path, f\\\"log_{date_str}.txt\\\")\\n\\twith open(log_file_path, \\\"a\\\", encoding=\\\"utf-8\\\") as log_file:\\n\\t\\tlog_file.write(f\\\"{datetime.now().strftime('%H:%M:%S')} - {message}\\\\n\\\")\\n\\ndef sync_rows(date_str=None):\\n\\ttry:\\n\\t\\tif date_str is None:\\n\\t\\t\\tdate_str = datetime.now().strftime(\\\"%Y-%m-%d\\\")\\n\\t\\t\\n\\t\\t# Set up Google Sheets API\\n\\t\\tscope = [\\\"https://spreadsheets.google.com/feeds\\\", \\n\\t\\t\\t\\t \\\"https://www.googleapis.com/auth/drive\\\"]\\n\\t\\tcreds = ServiceAccountCredentials.from_json_keyfile_name(google_credentials_file, scope)\\n\\t\\tclient = gspread.authorize(creds)\\n\\t\\t\\n\\t\\t# Path to the Excel file\\n\\t\\texcel_path = os.path.join(folder_path, f\\\"attendance_{date_str}.xlsx\\\")\\n\\t\\tif not os.path.exists(excel_path):\\n\\t\\t\\twrite_log(f\\\"No Excel file found for date {date_str}\\\", date_str)\\n\\t\\t\\treturn False\\n\\t\\t\\n\\t\\tdf = pd.read_excel(excel_path)\\n\\t\\tspreadsheet = client.open(google_sheet_name)\\n\\t\\t\\n\\t\\t# Open the sheet or create a new one if not found\\n\\t\\ttry:\\n\\t\\t\\tsheet = spreadsheet.worksheet(date_str)\\n\\t\\texcept gspread.exceptions.WorksheetNotFound:\\n\\t\\t\\tsheet = spreadsheet.add_worksheet(title=date_str, rows=100, cols=5)\\n\\t\\t\\tsheet.append_row([\\\"Name\\\", \\\"Entry Time\\\", \\\"Exit Time\\\", \\\"Duration\\\", \\\"Status\\\"])\\n\\n\\t\\tsheet_data = sheet.get_all_values()\\n\\t\\tcurrent_row_count = len(sheet_data)  # includes header row\\n\\t\\texcel_row_count = len(df) + 1  # add 1 for header row\\n\\n\\t\\t# Update existing rows or add new rows\\n\\t\\tfor i in range(1, excel_row_count):  # Starting from 1 to skip header\\n\\t\\t\\trecord = df.iloc[i - 1]\\n\\t\\t\\trow_data = [\\n\\t\\t\\t\\tstr(record[\\\"name\\\"]),\\n\\t\\t\\t\\trecord[\\\"entry_time\\\"].strftime(\\\"%Y-%m-%d %H:%M:%S\\\") if pd.notna(record[\\\"entry_time\\\"]) else \\\"\\\",\\n\\t\\t\\t\\trecord[\\\"exit_time\\\"].strftime(\\\"%Y-%m-%d %H:%M:%S\\\") if pd.notna(record[\\\"exit_time\\\"]) else \\\"\\\",\\n\\t\\t\\t\\tstr(record[\\\"duration\\\"]) if pd.notna(record[\\\"duration\\\"]) else \\\"\\\",\\n\\t\\t\\t\\tstr(record[\\\"status\\\"]) if pd.notna(record[\\\"status\\\"]) else \\\"\\\"\\n\\t\\t\\t]\\n\\t\\t\\t\\n\\t\\t\\tif i < current_row_count:\\n\\t\\t\\t\\t# Update existing row in Google Sheet\\n\\t\\t\\t\\tsheet.update(f\\\"A{i+1}:E{i+1}\\\", [row_data])  # Update row based on position\\n\\t\\t\\telse:\\n\\t\\t\\t\\t# Add new row if Excel has more rows than Google Sheet\\n\\t\\t\\t\\tsheet.append_row(row_data)\\n\\t\\t\\n\\t\\twrite_log(f\\\"Synced data with Google Sheet for {date_str}\\\", date_str)\\n\\t\\treturn True\\n\\n\\texcept Exception as e:\\n\\t\\twrite_log(f\\\"Error syncing to Google Sheet: {str(e)}\\\", date_str)\\n\\t\\treturn False\\n\\nif __name__ == \\\"__main__\\\":\\n\\tsync_rows()\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 1634,\n                \"y\": 323\n            }\n        },\n        {\n            \"id\": \"{75a4ca1b-3f90-4133-a10e-d8e50d9fbc01}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"WebCam \",\n                \"node_enable\": false,\n                \"setting\": {\n                    \"webcamUUID\": \"B24-77B\"\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 38,\n                \"y\": 285\n            }\n        },\n        {\n            \"id\": \"{240e1bf8-d795-4292-8d66-21d43f9516b8}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"FaceTrainer\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 418,\n                \"y\": 285\n            }\n        },\n        {\n            \"id\": \"{4ee654aa-9c41-4720-bb9f-f716c87e016e}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -342,\n                \"y\": 285\n            }\n        },\n        {\n            \"id\": \"{b02bdfe5-ec8a-4315-9ddd-5e383afaa503}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -266,\n                \"y\": 19\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_fix\": false,\n        \"flow_view_pos_x\": 399.1998039999992,\n        \"flow_view_pos_y\": -134.1339099999987,\n        \"flow_view_zoom_factor\": 0.6209213230591556,\n        \"scene_version\": 0\n    }\n}\n",
            "name": "Main"
        }
    ]
}
